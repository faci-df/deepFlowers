## 1. 개요	
  
1.1.목표

이 문서는 프로젝트 관리자, 개발자, 설계자, 사용자 모두가 읽어야 함.
향후에 연말 성과발표시 사용할 수도 있음.

1.2.문서 규칙

N/A

1.3. 대상 독자 및 읽는 방법

테스트 시나리오 작성자, 사용자 설명서 작성자는 기능요구사항을 주로 읽어야 함.
성과발표자는 1장 개요 2장 설명을 중점을  두고 읽어야 함. 
3장 이후는 Software Engineering 지식을 필요로 함.
Use Case Diagram, Sequence Diagram은 UML(Unified Modeling Language)을 이해해야 한다.

1.4. 프로젝트의 목표

우리 주변에는 많은 꽃이 있다. 꽃을 좋아하는 사람은 많지만 정작 꽃이름에 대해 잘 알고 있는 이는 드물다. 
수많은 꽃이름을 모두 외우는 것 또한 불가능하다. 거리에 핀 수많은 들꽃을 포함해서...
아이와 함께 길을 걷다가 아이가 궁금해하는 꽃이름을 가르켜 주거나 등산을 하다 마주하는 꽃이름을 기억하고 싶다.
썸타는 이성과 데이트를 하다 꽃이름을 실마리로 다정하게 이야기를 풀어나가면 얼마나 좋을까?
본 프로젝트는 이렇게 시작되었다.

1.5. 관련문서
N/A

1.6. 정의 및 약어

	1.6.1. 텐서플로우(TensorFlow) : 기계 학습(Machine learning)과 딥러닝(Deep learning)을 위해 구글에서 만든 오픈소스 라이브러리.
	1.6.2. 기트허브 (GitHub) : 팀 프로젝트 소스 관리/이슈관리 시스템
	1.6.3. 슬랙 (Slack) : 협업 메신저	

1.7. 프로젝트 산출물

	1.7.1. 소스파일/이슈트래커: https://github.com/faci-df/deepFlowers

	1.7.2. 홈페이지: http://www.deepflowers.io


1.8. 산출물 형태

	안드로이드 애플리케이션 (Play Store 등록, APK File)
	가칭: 꽃이름 찾기

1.9. 산출물 명(가칭) 및 버전

	1.9.1.	AI 개발 프로세스 확립
	1.9.2.	이슈트래커(Issue Tracker) 산출물
	1.9.3.	앱(플레이스토어, 앱스토어 런칭)
	1.9.4.	스펙 문서
	1.9.5.	소스 코드


1.10. Scope
본 소프트웨어 요구사항 명세서는 꽃 이미지 찾기 소프트웨어의 기술 개발의 1차 년도에 필요한 사용자 요구사항을 도출하고 이에 따른 시스템 요구사항을 기술한 문서이다.

• 본 연구과제의 결과물을 활용하는 사용자 측면에서의 요구사항 및 기술의 발전 방향, 현 기술상태, 환경의 분석을 통해 도출된 것이다.
• 요구사항 정의사는 설계 구현 시험의 개발 과정에서 주요한 판단의 기준이 되는 문서로 활용하고자 한다.

• 주 기술 “텐서플로우”를 이용한 기계학습의 환경 및 기술을 상세화 한다.
• 2017년 연구회원이 개발하기 위한 Deep Flowers의 요구사항을 상세화하여 시스템을 개발한다.
• 본 소프트웨어는 모바일 용 어플리케이션이나, IOS는 지원하지 않는다.( 2018년 연구 예정 )

본 문서는 모바일 폰의 카메라를 사용하여 인식한 꽃의 종류와 매칭 확률을 사용자에게 전달해주는 어플리케이션 개발에 필요한 요구사항을 정리하였다. 본 명세서의 목적은 정의된 요구사항들을 반영하여 개발자들이 소프트웨어의 설계에 반영하기 위함이다.

• 꽃 이미지 찾기 어플리케이션의 환경설정 및 설계를 위한 명세를 제공한다.
• 지정된 테스터의 테스트를 위한 정보를 제공한다.
• 사용자가 자신이 요청한 요구사항의 반영 여부와 적용되는 기술내용을 개괄적으로 파악하도록 한다.
• 사용자 요구사항과 환경이 변경됨에 따라 시스템 요구사항과 설계서, 시험계획서, 결과서도 이를 반영한다.
• 본 문서는 1차 년도의 요구사항만을 정의한다.


## 2.전체 설명


2.1.제품 조망

외부파일 참조 - 2.1.1_overview_uml.png


2.2.전체 시스템

<내부 컴포넌트 표시, 레이어 표시. 바깥의 어떤 것과 내부가 표시되는지? 외부 인터페이스와 연결관계. 프로젝트 산출물의 전체 시스템 구성도>

2.3. 동작방식
<2.2에서 나열한 내부 컴포넌트 동작방법 설명. 예를 들어 특정 시나리오를 놓고 순서대로 글쓰거나 다이어그램. 글로 쓰는 것을 권장함.>

2.4. 주요 기능

	2.4.1. 회원가입 

	2.4.2. 로그인

	2.4.3. Audit(감사 기능)

	2.4.4. 꽃 사진찍기 & 꽃이름 출력

2.5.사용자 계층과 특징

	사용자는 불특정 다수 스마트폰 사용자이며
	프로그램 개발자도 포함한다. 
	노인, 어린이 계층도 포함하는만큼 버튼 아이콘은 크게 만들고 Text 없이 아이콘 이미지로 동작을 추측할 수 있게 디자인 해야 한다.

	프로그램 개발자에게는 Hidden Option으로 Admin 기능을 제공한다.
	예를 들어 애플리케이션이 꽃이름을 못 찾을 경우 해당 꽃이름을 수동으로 입력하여 서버에 저장한 후 학습시킨다(Deep Learning).


2.6. 가정과 종속관계

	2.6.1. 개발도구: Android Studio 최신버전, Deep Learning Tool
	2.6.2. 베타버전 출시일: 2017년 6월
	2.6.3. 정식버전 출시일: 2017년 8월
	2.6.4. 협력패키지 종속성: Deep Learning Tool
	2.6.5. 프로젝트 수행 전제조건: Deep Learning 기술 검토 (실현가능성, 테스트용 이미지 데이터 입력방법)
	2.6.6. 프로젝트 지연요소: 연구회 참여자들의 개인시간, 참여의지/열정
	2.6.7. Project Risk: 연구회원 탈퇴
	2.6.8. 통제불가능한 외부요소: 동종 단독 App의 존재로 Project 구현의미가 없어지는 경우 Project 취소.
	       현재 단독 실행가능한 꽃이름 검색앱은 국내에 없음. 다음앱에서 일부 기능으로 꽃이름 검색 지원함. (정확도 60% 수준)            
	2.6.9. Project Plan: GitHub Issue Management System   

2.7. 단계별 요구사항
	2018년 iOS Version 꽃이름 검색앱 출시

2.8.하위 호환성
    N/A

## 3.Environment(환경)

<기계적으로 작성 가능>

3.1.운영 환경

3.1.1하드웨어 환경
PC
Android Device

3.1.2소프트웨어 환경
Google Android 5.0 이상

3.2.제품 설치 및 설정

Google Play Console을 통해 App 배포
APK File을 업로드
APK File Build 하기 전 Android Studio에서 버전 숫자 변경

3.3.배포환경

3.3.1.마스터 구성

APK파일 : DeepFlowers.apk

3.3.2.배포방법

3.3.2.1.	Android Play Store 로 배포
3.3.2.2.	DeepFlowers.apk 파일 직접 설치


3.3.3.패치와 업데이트 방법

3.3.3.1.	Android Play Store 로 자동 설치 배포
3.3.3.2.	DeepFlowers.apk 파일 직접 설치

3.4.개발 환경

3.4.1.하드웨어 환경

3.4.1.1.	PC (Windows, Mac) 
3.4.1.2.	Ubuntu 16.04 64bit Desktop
3.4.1.3.	GPU 없음( 필요로 할 수 도 있음)
3.4.1.4.	Android 5.0(API 21) 이상


3.4.2.소프트웨어 환경

OS : Linux(Ubuntu)

- TensorFlow
OS : Ubuntu
Builder : Bazel
language : Python
Open Source : Tensor Flow
CUDA
CUDNN

- Android
Android Studio
Android SDK / NDK

- AWS, Azure Cloud API


3.5.테스트 환경

3.5.1.하드웨어 환경

Android Device ( Example: Samsung Galaxy S7)

3.5.2.소프트웨어 환경

Android Studio Emulator

3.6.형상관리

3.6.1.산출물 위치

https://github.com/faci-df/deepFlowers

3.6.1.1.소스코드 위치

https://github.com/faci-df/deepFlowers.git

3.6.1.2.문서 위치

https://github.com/faci-df/deepFlowers.git

SRS.txt etc

3.6.2.빌드 환경(Tensorflow Case)

   텐서플로우 안드로이드를 개발하기 위해선 구글에서 개발한 바젤(Bazel)을 사용한다.
   OS : Linux
   [CPU 연산만 수행하고자 하는 경우]Ubuntu -> Anaconda2 0 -> Bazel -> Tensorflow -> 파이참
   [GPU 연산도 수행하고자 하는 경우(nvidia)] Ubuntu -> Anaconda2 0 -> Bazel -> CUDA, Cudnn -> Tensorflow -> 파이참
   
   3.6.2.1. Linux(우분투) 설치 (듀얼 부팅 / 클라우드)버전 : Ubuntu 16.04.2 LTS
   3.6.2.2. Anaconda2 설치python2.7 버전 다운로드
   3.6.2.3. Bazel 설치 (자바 8버전 먼저 설치하여야 함)
            자바 설치 
            바젤 설치
   3.6.2.4. 텐서플로우 설치
   3.6.2.5. 파이참 설치 
   3.6.2.6. Android Studio 설치

3.7.버그 트래킹

https://github.com/faci-df/deepFlowers/issues

3.8.기타 환경
N/A

## 4.외부 인터페이스 요구사항

4.1.시스템 인터페이스
Google Android vs Deep Learning Engine
(기술 검토 중)

4.2.사용자 인터페이스
Android Device Touch Input
Android Phone Camera

4.3.하드웨어 인터페이스
N/A

4.4.소프트웨어 인터페이스
JAVA vs Python Codes (For Example: Google TensorFlow)
API Function call for LogIn between Local Device and Other Portal Sites Login Info (Facebook, Google, Kakao)
Data Interfaces by Local SQLite DB

4.5.통신 인터페이스
AWS Lambda Function Call for App Logging 

4.6.기타 인터페이스
N/A

## 5.성능 요구사항

<스마트폰 기본사항>

삼성 갤럭시 S6 엣지(Samsung Galaxy S6 Edge 이상 버전)
운영체제/소프트웨어 : 안드로이드 6.0.1 마시멜로 이상 버전
모델명 : SM-G925S (Korea SKT) 이후 버전
AP(Application Processor : 중앙처리장치) : 삼성전자 엑시노트 7 옥타
CPU(Central Processing Unit) :
ARM 홀딩스 코텍스-A57 2.1 GHz 쿼드 코어
ARM 홀딩스 코텍스-A53 아키텍처 1.5 GHz 쿼드 코어
(big.LITTLE HMP)
GPU(Graphics Processing Unit) :
ARM 홀딩스 말리 T760 MP8 700 MHz
RAM(Random Access Memory) : 3GB
저장용량 : 64GB (UFS : Unix File System)

5.1.작업처리량
	5.1.1. Server Dependent 환경에서 동시접속자 50명 이하 접속을 유지한다.
	       그 이상 접속하는 경우 '동시접속자 초과' 메시지를 띄우며 대기한다.
	       향후 Cloud Load Balancing 처리를 통해 접속자 초과시 Auto Scaling 기능 On
	5.1.2. Server Dependent 환경에서는 무료 Cloud Service Data Traffic을 초과하지 않는 수준에서
	       Image File Upload Size를 제한한다. (예, 3MB 이하)

5.2.동시 세션
	No Limitation. (상용 배포 전)
	Test 기간에는 50 Sessions 이하

5.3.대응시간
	5.3.1	검색 요청에 대한 처리를 3초 이내에 해야 한다.

5.4.성능 종속 관계
	N/A

5.5.기타 성능 요구사항

Android Device Disk Size가 최소 500MB 이상 여유가 있을 때만 동작한다. (Temporary Image Buffer Check)

< 메모리, 디스크공간 요구사항>
	5.5.1	Deep Flowers 어플리케이션의 사용 시 필요한 메모리는 300MB 필요하다.
	5.5.2	Deep Flowers 어플리케이션의 사용 디스크 공간은 300MB 정도로 예상하며, 스마트폰의 디스크 공간은 스마트폰기종의 기본사양만 충족하면 된다.

<자원 사용률>
	5.5.3	스마트폰 메모리(전체 3GB 중 예비공간 392MB포함)를 300MB 이상 사용되지 않아야 한다.
	5.5.4	Deep Flowers 어플리케이션을 실행만 해 놓은 경우, CPU 사용량은 0MB, RAM 은 200MB 이하로 사용되어야 한다.(권장사용량 : 160MB)
	5.5.5	Deep Flowers 어플리케이션을 실행하고, 절전모드를 실행하면 RAM은 100MB 미만으로 사용되어야한다. (권장 사용량 : 11MB~90MB)


## 6.기능 이외 요구사항

6.1.안전성 요구사항
	N/A

6.2.보안 요구사항

<데이터 암호화, 사용자 인증, 권한정책, 암호화 방식…>
	User Password 등 개인정보에 민감한 데이터 저장이 필요한 경우 복호화가 불가능한 방식으로 암호화 하고 (예)SHA-512
	Password 재설정 기능만 제공한다. (비번 재설정은 Random 키로, 사용자에게 이메일로 알림)

6.3.소프트웨어 시스템 특성

6.3.1.가용성
	App이 비정상적인 예외로 오류가 발생하더라도 현재 단말기상황에 대한 Audit Data (with Parameters)는 반드시 남기도록 한다.
	User에게 팝업메시지로 관리자 이메일주소를 보여주고 오류레포트 전송 버튼을 표시한다.

6.3.2.유지보수성
	Program 구현시 Code Complexibility(코드 복잡도)를 최대한 제거하고 AMAP(As Much As Possible)으로
	잘게 쪼개서 각 Method를 작성해야 함. 불필요한 주석은 달지 않는다. Method Name으로 동작을 가늠할 수 있게 Method Naming에 신경을 쓴다.

6.3.3.이식성(Portablity)
	향후 iOS Version App 개발시 최대한 소스 재활용이 가능하게끔 Android 기술 종속적이지 않게 코딩해야 함.

6.3.4.신뢰성
	꽃이름 정확도가 50% 이하인 경우 꽃이름 검색대상에서 제외하고 Not Available 문구 표시
	충분히 머신러닝이 되지 않은 식물종류의 경우 정확도가 10% 이하가 나올 가능성이 있다. 이런경우 output으로 비슷한 꽃의 종류를 보여주고 매칭확률을 
	함께 display한다

6.3.5.나머지 특성(Remaining Attributes)
	N/A

6.4.데이터베이스 요구사항
	Mongo DB in AWS (Audit Usage, Scalable with Lambda Function)
	SQLite for Local DB (Android Machine)

6.5.비즈니스 규칙
	N/A

6.6.설계와 구현 제한사항
	N/A

6.6.1.표준준수
	IDE(개발툴은 Android Studio 최신 버전으로 제한) 

6.6.2.기타제한사항
	N/A

6.7.메모리 제한사항
	N/A

6.8.운영 요구사항
APK File 배포 후 직전 APK 파일을 GitHub에 보관한다. (파일명 규칙: 접미사 년월일시분초)
Audit Log를 주기적으로 확인하고 오류/예외사항 발생시 버그 수정 후  (배포 기한: 하루 이내 (오류 수정 기한: 즉시, GitHub Source Commit))

6.9.사이트 적용 요구사항
	N/A

6.10다국어 지원 요구사항
	한국어/영어만 지원함.

6.11.유니코드 지원
	UTF8 Only

6.12.64비트 지원
	N/A

6.13.제품 인증

	Google Play Store 인증 필요.

6.14.필드 테스트

	Beta Version 으로  Google Play Store 를 통해 배포하여 주변 지인들에게 베타테스트 요청해야 함.

6.15. 기타 요구사항


## 7.기능 요구사항

Use Case Diagram
User Interface Design 은 별도 문서로 작성함. 

7.1. 회원가입

	7.1.1. 아이디/비번
		7.1.1.1. 아이디는 언제든 바꿀 수 있음. 별도의 Generated Key를 PK로 사용함.
		7.1.1.2. 비밀번호 자리수는 8자리 이상, 특수문자,숫자,문자(영어), 대문자를 한개이상 포함해야 함

	7.1.2. 이메일

	7.1.3. 카메라/앨범 사용 권한
		7.1.2.1. 회원가입시 카메라/앨범 사용권한을 물어보고 허용해야만 App 실행 가능.
		
	7.1.4. 사용 언어 선택
	       영어/한국어 
	       
	7.1.5. 페이스북, 구글, 카카오 로그인 연동 고려

7.2. 로그인
	7.2.1. 아이디/비번이 일치하면 메인 화면으로 이동
	7.2.2. 아이디/비번이 5번이상 불일치 하면 계정 잠금
		7.2.2.1. 아이디/비번이 5번이상 불일치 하면 그 이후에는 App 접근시 계정잠금 내용을 알리고
        		 Password Reset 요청을 하도록 함. 회원가입시 등록한 이메일로 요청하게 함.

7.3. Audit(감사 기능)
	7.3.1. 사용자 접속기록 남기기
		7.3.1.1.  IP주소, 사용자 브라우저, 아이디 비번, 실패한 비밀번호, 로그인 시도 횟수

7.4. 꽃 사진찍기
	7.4.1. 꽃이름 알기 버튼을 누르면 휴대폰의 카메라 기능을 실행함.
		7.4.1.1. MDM 같은 보안 프로그램이 카메라 기능 실행을 방해하면 경고메시지 출력 후 App 종료함.
		7.4.1.2. 카메라의 초점이 맞으면 자동으로 사진을 촬영하고 앨범에 집어 넣음.
		7.4.1.3. 촬영한 꽃사진을 Deep Flowers 엔진에 입력하여 꽃이름을 출력함. (정확도 표시)
			7.4.1.3.1. 꽃이름을 알 수가 없으면 Unknown(알수없음) 표시.
			7.4.1.3.2. Admin Mode 일 경우 꽃이름 입력 기능을 표시하고 해당 꽃의 이름을 입력하고 저장함. (Deep Learning)

## 8.변경관리 프로세스

8.1. 프로그램 소스, 산출물(SRS etc) 변경이 발생할 경우 GitHub에 Commit하고 Pull Request를 요청한다.
8.2. 변경승인자(연구회 리더)는 해당 내용을 Merge할지 Reject할지를 결정한다.

## 9.최종 승인자
연구회원 전원	

## 10. 참고문헌

Google Tensorflow
GitHub
Google Android 
AWS, Azure, Google Cloud Vision API 



